const { ethers, BigNumber } = require("ethers");
const { keccak256 } = require("ethers/lib/utils");

main();

function main() {
  let sender = "0x6278A1E803A76796a3A1f7F6344fE874ebfe94B2";
  let nonce = 524;
  getAddressCreate(sender, nonce);

  let from = "0x0000000000ffe8b47b3e2130213b802212439497";
  let salt =
    "0x0000000000000000000000000000000000000000000000000000000000000001";

  let initCode =
    "0x60806040523480156200001157600080fd5b5060408051808201825260048082526310d3965560e21b60208084018290528451808601909552918452908301529060036200004e8382620002e8565b5060046200005d8282620002e8565b50506005805460ff19169055506200007533620000a4565b6200009e33620000886006600a620004c9565b62000098906305f5e100620004e1565b620000fe565b62000511565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166200015a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b6200016860008383620001d3565b80600260008282546200017c9190620004fb565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b620001dd620001fa565b620001f5838383620001f560201b620004fe1760201c565b505050565b60055460ff1615620002425760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000151565b565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026f57607f821691505b6020821081036200029057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001f557600081815260208120601f850160051c81016020861015620002bf5750805b601f850160051c820191505b81811015620002e057828155600101620002cb565b505050505050565b81516001600160401b0381111562000304576200030462000244565b6200031c816200031584546200025a565b8462000296565b602080601f8311600181146200035457600084156200033b5750858301515b600019600386901b1c1916600185901b178555620002e0565b600085815260208120601f198616915b82811015620003855788860151825594840194600190910190840162000364565b5085821015620003a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200040b578160001904821115620003ef57620003ef620003b4565b80851615620003fd57918102915b93841c9390800290620003cf565b509250929050565b6000826200042457506001620004c3565b816200043357506000620004c3565b81600181146200044c5760028114620004575762000477565b6001915050620004c3565b60ff8411156200046b576200046b620003b4565b50506001821b620004c3565b5060208310610133831016604e8410600b84101617156200049c575081810a620004c3565b620004a88383620003ca565b8060001904821115620004bf57620004bf620003b4565b0290505b92915050565b6000620004da60ff84168362000413565b9392505050565b8082028115828204841417620004c357620004c3620003b4565b80820180821115620004c357620004c3620003b4565b610cb180620005216000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806370a08231116100a257806395d89b411161007157806395d89b411461022d578063a457c2d714610235578063a9059cbb14610248578063dd62ed3e1461025b578063f2fde38b1461026e57600080fd5b806370a08231146101cb578063715018a6146101f45780638456cb59146101fc5780638da5cb5b1461020457600080fd5b8063313ce567116100e9578063313ce5671461018157806339509351146101905780633f4ba83a146101a357806340c10f19146101ad5780635c975abb146101c057600080fd5b806306fdde031461011b578063095ea7b31461013957806318160ddd1461015c57806323b872dd1461016e575b600080fd5b610123610281565b6040516101309190610afb565b60405180910390f35b61014c610147366004610b65565b610313565b6040519015158152602001610130565b6002545b604051908152602001610130565b61014c61017c366004610b8f565b61032d565b60405160068152602001610130565b61014c61019e366004610b65565b610351565b6101ab610373565b005b6101ab6101bb366004610b65565b610385565b60055460ff1661014c565b6101606101d9366004610bcb565b6001600160a01b031660009081526020819052604090205490565b6101ab61039b565b6101ab6103ad565b60055461010090046001600160a01b03166040516001600160a01b039091168152602001610130565b6101236103bd565b61014c610243366004610b65565b6103cc565b61014c610256366004610b65565b61044c565b610160610269366004610bed565b61045a565b6101ab61027c366004610bcb565b610485565b60606003805461029090610c20565b80601f01602080910402602001604051908101604052809291908181526020018280546102bc90610c20565b80156103095780601f106102de57610100808354040283529160200191610309565b820191906000526020600020905b8154815290600101906020018083116102ec57829003601f168201915b5050505050905090565b600033610321818585610503565b60019150505b92915050565b60003361033b858285610627565b6103468585856106a1565b506001949350505050565b600033610321818585610364838361045a565b61036e9190610c5a565b610503565b61037b610850565b6103836108b0565b565b61038d610850565b6103978282610902565b5050565b6103a3610850565b61038360006109cd565b6103b5610850565b610383610a27565b60606004805461029090610c20565b600033816103da828661045a565b90508381101561043f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103468286868403610503565b6000336103218185856106a1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61048d610850565b6001600160a01b0381166104f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610436565b6104fb816109cd565b50565b505050565b6001600160a01b0383166105655760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610436565b6001600160a01b0382166105c65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610436565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610633848461045a565b9050600019811461069b578181101561068e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610436565b61069b8484848403610503565b50505050565b6001600160a01b0383166107055760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610436565b6001600160a01b0382166107675760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610436565b610772838383610a64565b6001600160a01b038316600090815260208190526040902054818110156107ea5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610436565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361069b565b6005546001600160a01b036101009091041633146103835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610436565b6108b8610a6c565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0382166109585760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610436565b61096460008383610a64565b80600260008282546109769190610c5a565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610a2f610ab5565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108e53390565b6104fe610ab5565b60055460ff166103835760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610436565b60055460ff16156103835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610436565b600060208083528351808285015260005b81811015610b2857858101830151858201604001528201610b0c565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610b6057600080fd5b919050565b60008060408385031215610b7857600080fd5b610b8183610b49565b946020939093013593505050565b600080600060608486031215610ba457600080fd5b610bad84610b49565b9250610bbb60208501610b49565b9150604084013590509250925092565b600060208284031215610bdd57600080fd5b610be682610b49565b9392505050565b60008060408385031215610c0057600080fd5b610c0983610b49565b9150610c1760208401610b49565b90509250929050565b600181811c90821680610c3457607f821691505b602082108103610c5457634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561032757634e487b7160e01b600052601160045260246000fdfea2646970667358221220aaf1407784baf609752697392aa25cd1cb575c1a6b9c3f663bc14704a6a94f9d64736f6c63430008120033";
  let initCodeHash = keccak256(initCode);
  // 0x00000000000000000000000000000000000000000000000000000000000000aa
  // 0x777d2032769ba80a42f9c678024cdfc275ad9cf8051a421b6713a96bef8d95f5
  // 0x8Fff376D4cbceF419dE0a63322DA130775096F01

  //   console.log(initCodeHash);
  var isValid = false;
  const regex = /^0x000000.*$/; // 表达式
  let index = 1056810;
  while (!isValid) {
    index++;
    console.log(index);
    let salt = ethers.utils.hexZeroPad(ethers.utils.hexlify(index), 32);

    let address = getAddressCreate2(from, salt, initCodeHash);

    isValid = regex.test(address);
    if (isValid) {
      console.log("Create2:" + salt + " " + address);
      return;
    }
  }

  //   while (!isValid) {
  //     wallet = ethers.Wallet.createRandom(); // 随机生成钱包，安全
  //     isValid = regex.test(wallet.address); // 检验正则表达式
  //   }
}
function getAddressCreate(sender, nonce) {
  let address = ethers.utils.getContractAddress({ from: sender, nonce: nonce });
  console.log("Create:" + address);
  return address;
}
function getAddressCreate2(from, salt, initCodeHash) {
  let address = ethers.utils.getCreate2Address(from, salt, initCodeHash);
  //   console.log("Create2:" + salt + " " + address);
  return address;
}
