const { ethers, utils } = require("ethers");

main();

function main() {
  let sender = "0x00cafc2e577881b0f947f03c5e4831ec9ab4d7a0";
  let nonce = 0;
  getAddressCreate(sender, nonce);

  let from = "0x0000000000ffe8b47b3e2130213b802212439497";
  let salt =
    "0x0000000000000000000000000000000000000000000000000000000000000001";

  let initCode =
    "0x60803461008a57601f61078138819003918201601f19168301916001600160401b0383118484101761008f5780849260209460405283398101031261008a57516001600160a01b0381169081900361008a5761005a336100a5565b60018055600280546001600160a01b03191691909117905561007b326100a5565b60405161069490816100ed8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a356fe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163715018a61461007e575080638da5cb5b146100795780639a2b811514610074578063d85797041461006f578063ecb96fe61461006a5763f2fde38b0361000e57610361565b610338565b6102f1565b6100d2565b6100a4565b346100a157806003193601126100a157610096610428565b61009e610480565b80f35b80fd5b346100cd5760003660031901126100cd576000546040516001600160a01b039091168152602090f35b600080fd5b6020806003193601126100cd5760049067ffffffffffffffff9082358281116100cd57366023820112156100cd57808401359283116100cd576024810190602436918560051b0101116100cd576002926001948486541461029c5784865560005b8281106101585747610149575b61001960018055565b600080808047335af150610140565b85546001600160a01b0316906101996101728286886104c0565b35926040938451809263b1283e7760e01b8252818060609687958b83019190602083019252565b03915afa908115610297578a9487896102109587956000958692879261025d575b50506101c590610580565b8c600091600014610216575050916101f16101e86000966101fe948897966104c0565b828101906105cc565b92909151809381936105ff565b03915af461020a61060d565b5061064d565b01610133565b9361023e6101e888868599979861023661020a9c89989b61024b9a6104c0565b0135956104c0565b93909151809481936105ff565b03925af161025761060d565b90151591565b6101c59750610285935080919250903d10610290575b61027d818361050e565b810190610542565b9195909190386101ba565b503d610273565b610574565b60405162461bcd60e51b8152908101849052601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6001600160a01b038116036100cd57565b346100cd5760203660031901126100cd5760043561030e816102e0565b610316610428565b600280546001600160a01b0319166001600160a01b0392909216919091179055005b346100cd5760003660031901126100cd576002546040516001600160a01b039091168152602090f35b346100cd5760203660031901126100cd5760043561037e816102e0565b610386610428565b6001600160a01b0390811680156103d457600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361043c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3565b91908110156104e25760051b81013590605e19813603018212156100cd570190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761053057604052565b6104f8565b519081151582036100cd57565b908160609103126100cd578051610558816102e0565b91610571604061056a60208501610535565b9301610535565b90565b6040513d6000823e3d90fd5b1561058757565b60405162461bcd60e51b815260206004820152601760248201527f5f74726164653a20496e416374697665204d61726b65740000000000000000006044820152606490fd5b903590601e19813603018212156100cd570180359067ffffffffffffffff82116100cd576020019181360383136100cd57565b908092918237016000815290565b3d15610648573d9067ffffffffffffffff8211610530576040519161063c601f8201601f19166020018461050e565b82523d6000602084013e565b606090565b1561065457565b3d6000803e3d6000fdfea2646970667358221220da1dc26e1f676f21f14463ba38c47cf60b530ceca8befd75772d3740ca3b647664736f6c634300081200330000000000000000000000000000c882f269b5ef434679cd0f50189abf19cb27";
  let initCodeHash = utils.keccak256(initCode);
  // 353920 0x0000000000000000000000000000000000000000000000000000000000056680 0x0000081ab39f161829d49D402ac0BdD2e54e9F09
  // 6771062 0x0000000000000000000000000000000000000000000000000000000000675176 0x0000004E696a52e7aAB3C5E921F39E0F3DBE7c72
  var isValid = false;
  const regex = /^0x0000000.*$/; // 表达式
  let index = 40000000;
  let end = 50000000;
  while (!isValid) {
    console.log(index);
    let salt = ethers.utils.hexZeroPad(ethers.utils.hexlify(index), 32);

    let address = getAddressCreate2(from, salt, initCodeHash);

    isValid = regex.test(address);
    if (isValid) {
      console.log("Create2:" + salt + " " + address);
      return;
    }
    index++;
    if (index > end) return;
  }

  //   while (!isValid) {
  //     wallet = ethers.Wallet.createRandom(); // 随机生成钱包，安全
  //     isValid = regex.test(wallet.address); // 检验正则表达式
  //   }
}
function getAddressCreate(sender, nonce) {
  let address = ethers.utils.getContractAddress({ from: sender, nonce: nonce });
  console.log("Create:" + address);
  return address;
}
function getAddressCreate2(from, salt, initCodeHash) {
  let address = ethers.utils.getCreate2Address(from, salt, initCodeHash);
  //   console.log("Create2:" + salt + " " + address);
  return address;
}
